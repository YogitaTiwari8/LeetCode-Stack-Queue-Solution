/*
 * LeetCode: 496
 * Problem: Next Greater Element I
 * Link: https://leetcode.com/problems/next-greater-element-i/
 *
 * Approach:
 * - Use a monotonic decreasing stack to find next greater elements for nums2.
 * - Traverse nums2 from right to left.
 * - For each element in nums2:
 *     - Pop elements from stack while they are less than or equal to current.
 *     - The top of the stack (if exists) is the next greater element.
 *     - Store the mapping of current element -> next greater element.
 * - Then, for each element in nums1, use the map to get its next greater from nums2.
 */

Solution
--
class Solution {
    public int[] nextGreaterElement(int[] nums1, int[] nums2) {
        Stack<Integer> stack = new Stack<>();
        Map<Integer, Integer> map = new HashMap<>();

        // Traverse nums2 from right to left and build next greater map
        for (int i = nums2.length - 1; i >= 0; i--) {
            // Maintain decreasing order in stack
            while (!stack.isEmpty() && nums2[i] >= stack.peek()) {
                stack.pop();
            }

            // Map current number to its next greater (or -1 if none)
            int nextGreater = stack.isEmpty() ? -1 : stack.peek();
            map.put(nums2[i], nextGreater);

            // Push current number to stack
            stack.push(nums2[i]);
        }

        // Prepare result for nums1 using the precomputed map
        int[] result = new int[nums1.length];
        for (int i = 0; i < nums1.length; i++) {
            result[i] = map.getOrDefault(nums1[i], -1);
        }

        return result;
    }
}
--
