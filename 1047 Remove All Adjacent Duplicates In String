/*
LeetCode: 1047
Problem: Remove All Adjacent Duplicates In String
Link: https://leetcode.com/problems/remove-all-adjacent-duplicates-in-string/
Approaches:
1. Without Stack - Using StringBuilder as a simulated stack.
2. With Stack - Standard approach using an explicit stack.
3. With Stack + String building - Tracks both stack and resulting string (less optimal).
 */

Solution
--
class Solution {

    // Approach 1: Using StringBuilder without Stack
    public String removeDuplicates(String s) {
        StringBuilder str = new StringBuilder();
        for (char ch : s.toCharArray()) {
            // Remove if last character is same as current
            if (str.length() > 0 && str.charAt(str.length() - 1) == ch) {
                str.deleteCharAt(str.length() - 1);
            } else {
                str.append(ch);
            }
        }
        return str.toString();
    }

    // Approach 2: Using Stack
    public String removeDuplicateswithstack(String s) {
        Stack<Character> stack = new Stack<>();
        for (char ch : s.toCharArray()) {
            // Pop if duplicate found
            if (!stack.isEmpty() && ch == stack.peek()) {
                stack.pop();
            } else {
                stack.push(ch);
            }
        }

        // Reconstruct string from stack
        StringBuilder result = new StringBuilder();
        while (!stack.isEmpty()) {
            result.append(stack.pop());
        }

        return result.reverse().toString();
    }

    // Approach 3: Stack with extra string tracking (less efficient)
    public String removeDuplicatesApproach1(String s) {
        Stack<Character> stack = new Stack<>();
        String str = "";
        for (char ch : s.toCharArray()) {
            if (stack.isEmpty()) {
                stack.push(ch);
                str = str + ch;
            } else if (stack.peek() == ch) {
                stack.pop();
                str = str.substring(0, str.length() - 1);
            } else {
                stack.push(ch);
                str = str + ch;
            }
        }
        return str;
    }
}
--
